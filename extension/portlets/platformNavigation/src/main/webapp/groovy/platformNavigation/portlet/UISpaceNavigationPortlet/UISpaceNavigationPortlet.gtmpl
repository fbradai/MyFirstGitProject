
<%
/*
<!--

    Copyright (C) 2003-2007 eXo Platform SAS.

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU Affero General Public License
    as published by the Free Software Foundation; either version 3
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, see<http://www.gnu.org/licenses/>.

-->
*/
%>
<%
  import org.exoplatform.portal.mop.user.UserNavigation;
  import org.exoplatform.portal.mop.user.UserNode;
  import org.exoplatform.portal.webui.util.Util;
  import org.exoplatform.portal.mop.Visibility;
  import org.exoplatform.webui.organization.OrganizationUtils;
  import org.exoplatform.platform.webui.NavigationURLUtils;
import org.exoplatform.social.core.service.LinkProvider;
  import java.util.Collection;

  import org.exoplatform.web.application.JavascriptManager;
  import org.gatein.common.text.EntityEncoder;

    void renderGroupPageNavigation(UserNavigation navigation) {
    	def nodes = uicomponent.getUserNodes(navigation);
    	if(nodes == null || nodes.isEmpty()) return ;
    	def ownerId = navigation.getKey().getName();
    	String navTitle = _ctx.appRes("UIPageNavigation.label.titleBar") ;
    	navTitle = navTitle.replace("{0}", OrganizationUtils.getGroupLabel(ownerId));
        String spacesNavigations= navigation.getKey().getName();
        if(spacesNavigations.indexOf("spaces") > 0) {
                int idx =0;
                for(UserNode node : nodes) {
                    renderPageNodeGroup(node, idx++ %2 == 0 ) ;
                }
        }
    }
	void renderPageNodeGroup(UserNode node, boolean flag) {
	    if(!node.getVisibility().equals(Visibility.DISPLAYED)) {
	      return;
	    }
		UserNode selectedNode = uicomponent.getSelectedNode();
		String tabStyleNavigation = "";
        if(selectedNode != null && node.getURI() == selectedNode.getURI()) {
            tabStyleNavigation = "UISpaceNavigationPortletSelectedItem";
        }

		String clazz = "";

		String	href = NavigationURLUtils.getURL(node);

		String icon = node.getIcon();
		if(icon == null) icon = "DefaultPageIcon";
		boolean toolong = (node.resolvedLabel.length() > 60);
		String label = ( toolong ? node.resolvedLabel.substring(0, 57) + "..." : node.resolvedLabel);
		String title = "";

		if(toolong) title = "title='$node.resolvedLabel'";
		else title = "";
        EntityEncoder entityEncoder = EntityEncoder.FULL;
		label = entityEncoder.encode(label);
		print """
			<div class="SpaceItem $clazz $tabStyleNavigation">
		""";
						if(node.pageRef != null) {
								print """<a class="ItemIcon" href="$href" $title>$label</a>""";

						} else {
								print """<a class="ItemIcon" href="#" $title>$label</a>""";
						}

		print """
			</div>
		""" ;
	}

	if (uicomponent.renderSpacesLink()) {

    def spacesLink = NavigationURLUtils.getURLInCurrentPortal("spaces");
    def findSpacesLink = NavigationURLUtils.getURLInCurrentPortal("all-spaces");
	def groupNavigations = uicomponent.getGroupNavigations();
	def spaceTotal=groupNavigations.size();
	def MY_SPACES_MAX_NUMBER;
	if(uicomponent.getSpaceMaxNumber()!=0){
	MY_SPACES_MAX_NUMBER = uicomponent.getSpaceMaxNumber();

	}else{

	MY_SPACES_MAX_NUMBER=10;
	}

    def mySpacesDisplayed = 0;

%>

<div class="UIUserToolBarGroupPortlet UIHorizontalTabs" id="$uicomponent.id">
  <div class="NormalToolbarTab"><a class="EditorIcon TBIcon" href="<%= spacesLink %>"><%=_ctx.appRes("UISpaceNavigationPortlet.label.Spaces")%> ($spaceTotal)</a></div> <!-- Merge exoadmin:  navigation-->


    <%

    def rcontext = _ctx.getRequestContext();
    def jsManager = rcontext.getJavascriptManager();
    //jsManager.addCustomizedOnLoadScript('eXo.portal.UIPortalNavigation.onLoad("' + uicomponent.id + '");');
    jsManager.require("SHARED/navigation", "navigation").addScripts('navigation.UIPortalNavigation.onLoad("' + uicomponent.id + '");');

    if (groupNavigations!= null && !groupNavigations.isEmpty()) {



      for(navigation in groupNavigations) {
      	if (navigation.getKey().getName().indexOf("spaces") <0 || mySpacesDisplayed == -1){
      		break;
      	}
      	if(mySpacesDisplayed < MY_SPACES_MAX_NUMBER){
      		mySpacesDisplayed += 1;
      		renderGroupPageNavigation(navigation);
      	}else{
		    def spaceNotDisplayed=spaceTotal - mySpacesDisplayed;

      		mySpacesDisplayed = -1;
      		def moreSpacesLabel = _ctx.appRes("UIMySpacePlatformToolBarPortlet.more");
      		def moreSpacesLink = uicomponent.event("Increment");
			if(spaceNotDisplayed>0){
      		print """
      			<div class="MenuItem">
      				""" ;
      				print """
      				<a href="$moreSpacesLink" onclick="">$moreSpacesLabel ($spaceNotDisplayed)</a>
      				""" ;
      				print """
      			</div>
      		""" ;
      	}}
      } %>

    <% } %>
    <!-- FIN -->


  </div>
</div>
<% } %>
