<%
    /**
     * Copyright ( C ) 2012 eXo Platform SAS.
     *
     * This is free software; you can redistribute it and/or modify it
     * under the terms of the GNU Lesser General Public License as
     * published by the Free Software Foundation; either version 2.1 of
     * the License, or (at your option) any later version.
     *
     * This software is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
     * Lesser General Public License for more details.
     *
     * You should have received a copy of the GNU Lesser General Public
     * License along with this software; if not, write to the Free
     * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
     * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
     */
%>
<%
    import javax.portlet.MimeResponse;
    import javax.portlet.ResourceURL;
    import org.exoplatform.portal.mop.user.UserNavigation;
    import org.exoplatform.portal.mop.user.UserNode;
    import org.exoplatform.portal.webui.util.Util;
    import org.exoplatform.portal.mop.Visibility;
    import org.exoplatform.webui.organization.OrganizationUtils;

    import org.exoplatform.web.application.JavascriptManager;
    import org.gatein.common.text.EntityEncoder;
    import org.exoplatform.platform.webui.NavigationURLUtils;
    import org.exoplatform.web.application.JavascriptManager;


    JavascriptManager jsManager = Util.getPortalRequestContext().getJavascriptManager();
    jsManager.addJavascript("initSitemapPortlet('$uicomponent.id');");

    void renderGroupPageNavigation(UserNavigation navigation, String lastNode) {

        def nodes = uicomponent.getValidUserNodes(navigation);
        if (nodes == null || nodes.isEmpty()) return;

        def ownerId = navigation.getKey().getName();
        String navTitle = OrganizationUtils.getGroupLabel(ownerId);

        println """
						<div class="$lastNode Node">
							<div class="ExpandIcon ClearFix">
							<input type="hidden" name="expandURL" value=""/>
					""";
        println """<a class=NodeIcon DefaultPageIcon' href="#">$navTitle</a>""";
        println """
							</div>
				        <div class="ChildrenContainer" style="display: none">
					""";

        lastNode1 = '';
        int childrenSize1 = nodes.size();
        int size1 = 0;
        for (UserNode node : nodes) {
            size1++;
            if (size1 == childrenSize1) {
                lastNode1 = 'LastNode';
            }
            renderPageNodeGroup(node, lastNode1);
        }
        println """
						</div>
					</div>
				""";
    }

    void renderPageNodeGroup(UserNode node, String lastNode) {

        if (!node.getVisibility().equals(Visibility.DISPLAYED)) {
            return;
        }

        def childrenNodes = uicomponent.getValidChildren(node);
        def hasChild = (childrenNodes != null) && !childrenNodes.isEmpty();
        String href = NavigationURLUtils.getURL(node);

        boolean toolong = (node.resolvedLabel.length() > 60);
        String label = (toolong ? node.resolvedLabel.substring(0, 57) + "..." : node.resolvedLabel);
        String title = "";
        if (toolong) title = "title='$node.resolvedLabel'";
        else title = "";
        EntityEncoder entityEncoder = EntityEncoder.FULL;
        label = entityEncoder.encode(label);

        if (node.pageRef == null) {
            href = "#"
        }
        if (hasChild) {

            MimeResponse res = _ctx.getRequestContext().getResponse();
            ResourceURL resourceURL = res.createResourceURL();
            def treePath = node.getId();
            resourceURL.setResourceID(treePath);
            def actionExpand = resourceURL.toString();
            println """
						<div class="$lastNode Node">
							<div class="ExpandIcon ClearFix">
							<input type="hidden" name="expandURL" value="$actionExpand"/>
					""";
            println """<a class=NodeIcon DefaultPageIcon' href="$href">$label</a>""";
            println """
							</div>
				        <div class="ChildrenContainer" style="display: none">
					""";

            lastNode2 = '';
            int childrenSize2 = childrenNodes.size();
            int size2 = 0;
            for (UserNode child : childrenNodes) {
                if (!node.getVisibility().equals(Visibility.DISPLAYED)) {
                    continue;
                }
                size2++;
                if (size2 == childrenSize2) {
                    lastNode2 = 'LastNode';
                }
                renderPageNodeGroup(child, lastNode2);
            }

            println """
						</div>
					</div>
				""";
        }
        else {
            println """
					<div class="$lastNode Node ClearFix">
						<div class="NullItem">
							<div class="ClearFix">
								<a class="NodeIcon DefaultPageIcon" href="$href">$label</a>
							</div>
						</div>
					</div>

				""";
        }
    }

    def groupNavigations = uicomponent.getGroupNavigations();
    def collapseAll = uicomponent.event("CollapseAll");
%>

<div id="$uicomponent.id" class="UISitemap">
   <div>
       <a href="#"><%=_ctx.appRes("UIGroupsNavigationPortlet.label")%></a>
   </div>
    <%
        if (groupNavigations != null && !groupNavigations.isEmpty()) {
    %>

    <div class="ClearFix">
        <div class="CollapseAll FL" onclick="$collapseAll">
            <%=_ctx.appRes("UIGroupsNavigationPortlet.label.CollapseAll")%>
        </div>
    </div>
    <%
        }
    %>
    <div class="SitemapContent">
        <div class="UISiteTree">
            <% if (groupNavigations != null && !groupNavigations.isEmpty()) {
                lastNode = '';
                int childrenSize = groupNavigations.size();
                int size = 0;
                for (navigation in groupNavigations) {
                    size++;

                    if (size == childrenSize) {
                        lastNode = 'LastNode';
                    }
                    renderGroupPageNavigation(navigation, lastNode);
                }
            }
            %>
        </div>
    </div>
</div>


